{"version":3,"sources":["components/Card.js","components/cardList.js","components/SearchBox.js","components/Scroll.js","components/errorboundary.js","containers/app.js","actions.js","serviceWorker.js","constants.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","n","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","event","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","errorboundary","cardList","connect","searchField","searchRobots","dispatch","payload","Boolean","window","location","hostname","match","initialState","store","createStore","arguments","undefined","action","assign","ReactDOM","render","es","containers_app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f98b78d9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    \r\n    return (\r\n        \r\n        <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt = 'robots' src = {`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    \r\n  \r\n    return (\r\n    <div>\r\n        {\r\n        robots.map((user, n) => {\r\n            return  (<Card \r\n                key={robots[n].id} \r\n                id = {robots[n].id} \r\n                name = {robots[n].name} \r\n                email = {robots[n].email}/> \r\n        );\r\n    })\r\n    }\r\n    </div>\r\n\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    \r\n    return (\r\n        <div className = 'pa2'>\r\n            <input \r\n            className = 'pa3 ba b--green bg-lightest-blue' \r\n            type = 'search' \r\n            placeholder = 'search robots'\r\n            onChange = {searchChange}/>\r\n        </div>\r\n        );\r\n\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid Black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}; \r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError){\r\n            return <h1>oops that is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport CardList from '../components/cardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport { connect } from 'react-redux';\r\nimport ErrorBoundary from '../components/errorboundary';\r\nimport './app.css';\r\n\r\nimport { setSearchField } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchfield\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value))\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots: users}));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n       \r\n     \r\n\r\n    }\r\n\r\n    render() {\r\n        const {robots, searchfield} = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase()) });\r\n            return !robots.length ?\r\n                <h1>Loading</h1>:\r\n            (\r\n            <div className = 'tc'>\r\n                <h1 className = 'f1'>RoboFriends</h1>\r\n                <SearchBox searchChange = {this.onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots = {filteredRobots}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n            );\r\n        }\r\n\r\n    }\r\n    \r\n    \r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: 'CHANGE_SEARCH_FIELD',\r\n    payload: text\r\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","import {CHANGE_SEARCH_FIELD} from'./constants.js';\r\n\r\nconst initialState = {\r\n    searchfield: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialState, action = {} ) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD :\r\n            return Object.assign({}, state, {searchfield: action.payload});\r\n        default: \r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport App from './containers/app';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots } from './reducers';\nimport 'tachyons';\n\nconst store = createStore(searchRobots);\n\n\nReactDOM.render(\n   <Provider store = {store}>\n      <App  />\n   </Provider>\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}